<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2017-07-23T10:20:26+08:00</updated><id>http://localhost:4000/</id><title type="html">Your awesome title</title><subtitle>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</subtitle><entry><title type="html">Welcome to Jekyll!</title><link href="http://localhost:4000/jekyll/update/2017/07/23/welcome-to-jekyll.html" rel="alternate" type="text/html" title="Welcome to Jekyll!" /><published>2017-07-23T10:01:48+08:00</published><updated>2017-07-23T10:01:48+08:00</updated><id>http://localhost:4000/jekyll/update/2017/07/23/welcome-to-jekyll</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/07/23/welcome-to-jekyll.html">&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;</content><author><name></name></author><summary type="html">You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.</summary></entry><entry><title type="html">redux!</title><link href="http://localhost:4000/jekyll/update/2017/07/23/redux.html" rel="alternate" type="text/html" title="redux!" /><published>2017-07-23T10:01:48+08:00</published><updated>2017-07-23T10:01:48+08:00</updated><id>http://localhost:4000/jekyll/update/2017/07/23/redux</id><content type="html" xml:base="http://localhost:4000/jekyll/update/2017/07/23/redux.html">&lt;h2 id=&quot;项目结构规划&quot;&gt;项目结构规划&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   docs                                # 项目文档
   tests                               # 其他测试文件
   mock                                # mock server/data
   node_modules                        
   src                                 # 项目源码
    |-- module                         # 项目模块(只有一个模块,这层目录可以省略)
    |   |-- components                 # 组件组件
    |   |   |-- *.tsx
    |   |-- actions                    # 项目action
    |   |   |-- actionType.ts
    |   |   |-- action.ts         
    |   |-- reducers                   # 项目reducer
    |   |   |-- index.ts
    |   |-- containers                 # 项目view 
    |   |   |-- *.tsx
    |   |-- service                    # 项目service
    |   |   |-- *.ts
    |   |-- css                        # 项目css
    |   |   |-- *.scss
    |   |   |-- index.ts
    |   |-- locale                     # 国际化文件
    |   |-- route.ts                   # 模块入口路由定义(按需加载)
    |   |-- index.tsx                  # 模块入口引入文件
    |   |-- routes.ts                  # 模块入口子路由定义
    |-- public                         # 项目静态资源公共目录
    |   |-- css                        # 公共CSS目录
    |   |   |-- common.scss
    |   |-- img                        # 公共图片目录
    |   |   |-- xx.png
    |-- util                           # 公共util目录
    |   |-- *.ts
    index.html                         # 访问的入口
    entry.tsx                          # js入口文件
    |-- App.tsx                        # 初始化redux store\国际化
    webpack.config.js                  # 公共配置
    webpack.dev.js                     # 开发配置
    webpack.release.js                 # 发布配置
    tsconfig.js                        # ts配置文件
    package.json                        
    READNE.md
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;ul&gt;
  &lt;li&gt;https://segmentfault.com/a/1190000005969488#articleHeader15&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;基本代码结构生成&quot;&gt;基本代码结构生成&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/StevenIseki/react-router-webpack-example&lt;/li&gt;
  &lt;li&gt;https://github.com/xiaoyann/webpack-react-redux-es6-boilerplate&lt;/li&gt;
  &lt;li&gt;https://facebook.github.io/react/docs/installation.html#creating-a-new-application&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;代码规范&quot;&gt;代码规范&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;https://github.com/JasonBoy/javascript/tree/master/react&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;react&quot;&gt;react&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;react详细讲解
    &lt;ul&gt;
      &lt;li&gt;https://facebook.github.io/react/community/support.html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;生命周期
    &lt;ul&gt;
      &lt;li&gt;http://www.codeceo.com/article/reactjs-life-circle-event.html
 &lt;img src=&quot;http://static.codeceo.com/images/2016/03/ajs-life.png&quot; alt=&quot;image&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;redux引入-结合react&quot;&gt;redux引入, 结合react&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;http://facebook.github.io/flux/img/flux-simple-f8-diagram-with-client-action-1300w.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;action(异步action, 添加thunk-middleware中间件)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const requestRegister = () =&amp;gt; ({
     type: actionType.REQUEST_REGISTER
  })

  const receiveRegister = (register: object) =&amp;gt; ({
     type: actionType.RECEIVE_REGISTER,
     register
  })
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;dipatch()
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export const fetchRegister = (opts?:object) =&amp;gt; (dispatch:any, getState:Function) =&amp;gt; {
    dispatch(requestRegister())
    return service.register(opts).then(data =&amp;gt; {
         dispatch(receiveRegister(data))
    }, data =&amp;gt; {
    dispatch(receiveRegister(data))
 })
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;reducer
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const register = (state = {}, action:any) =&amp;gt; {
    switch (action.type) {
      case actionType.RECEIVE_REGISTER:
        return action.register
      default:
        return state
    }
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;redux结合react
    &lt;ul&gt;
      &lt;li&gt;将 react 组件连接到 Redux 并且让它能够 dispatch actions 以及从 Redux store 读取到 state&lt;/li&gt;
      &lt;li&gt;引入react-redux提供的 Provider，并且在渲染之前将根组件包装进 &lt;Provider&gt;
&lt;/Provider&gt;        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;App/&amp;gt;
 &amp;lt;/Provider&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;react-redux 提供的 connect() 方法将包装好的组件连接到Redux
        &lt;ul&gt;
          &lt;li&gt;mapStateToProps: 把当前 Redux store state 映射到展示组件的 props 中(代替store.subscribe())&lt;/li&gt;
          &lt;li&gt;mapDispatchToProps: 方法接收 dispatch() 方法并返回期望注入到展示组件的 props 中的回调方法
            &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const mapStateToProps = (state:any, ownProps:any) =&amp;gt; {
  const { register } = state;
  return {
    register
  }
}
export default connect(
   mapStateToProps
)(App);
&lt;/code&gt;&lt;/pre&gt;
            &lt;/div&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;引入React Redux
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   this.props.dispatch(fetchRegister());
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;redux详细讲解
    &lt;ul&gt;
      &lt;li&gt;http://cn.redux.js.org/docs/basics/DataFlow.html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;typescript引入&quot;&gt;typescript引入&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;ts实现例子
    &lt;ul&gt;
      &lt;li&gt;https://github.com/Microsoft/TypeScript-React-Conversion-Guide&lt;/li&gt;
      &lt;li&gt;https://github.com/Microsoft/TypeScript-React-Starter&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;tsconfig.js基本配置(webpack ts-loader读取)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;compilerOptions&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;outDir&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./dist/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; 
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;sourceMap&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;noImplicitAny&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//支持&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;module&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;commonjs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//模块编译支持commonjs(node写法)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;target&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es5&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//被编译es5&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;jsx&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;react&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;lib&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;es2017&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;dom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//ts编译库&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;include&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./src/**/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;./custom.d.ts&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
 &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;ts声明方式:
    &lt;ul&gt;
      &lt;li&gt;1)  package.json @types引入: https://www.npmjs.com/package/@types/react(替换对应)
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;判断types中是否存在:
npm install typings --global
typings search --name react(替换存在的项目)
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;2) declare module * (declare var * ) 声明模块(js变量)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;typescrip详细讲解
    &lt;ul&gt;
      &lt;li&gt;https://www.typescriptlang.org/docs&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;react-router引入&quot;&gt;react-router引入&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;路由基本
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; routes() {
   return &amp;lt;Route path='/' component={Index}&amp;gt;
       {RegisterRoute}
   &amp;lt;/Route&amp;gt;
 }
调用:
 &amp;lt;Provider store={store}&amp;gt;
    &amp;lt;Router history={hashHistory} routes={this.routes()}&amp;gt;&amp;lt;/Router&amp;gt;
 &amp;lt;/Provider&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;模块化路由按需加载(webpack会require独立分片文件, 实现按路由拆分文件)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;const route =
 (&amp;lt;Route path=&quot;register&quot;
   getComponent={(location:any, callback:any) =&amp;gt; {
     require.ensure([], function (require: any) {
       const Index = require('./index')['default'];
       callback(null, Index.App);
     }, 'register');---&amp;gt; webpack: chunkFilename: [name]
   }}
  getChildRoutes={(location:any, callback: any) =&amp;gt; {
    require.ensure([], function (require:any) {
      const Index = require('./index')['default'];
      callback(null, Index.routes);
    }, 'register');
 }}&amp;gt;
 &amp;lt;/Route&amp;gt;);
 export default route;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
    &lt;ul&gt;
      &lt;li&gt;http://blog.zhaiyifan.cn/2016/11/16/pwa-react-p2/&lt;/li&gt;
      &lt;li&gt;http://robin-front.github.io/2016/04/18/react-router%E5%8A%A8%E6%80%81%E8%B7%AF%E7%94%B1%E4%B8%8EWebpack%E5%88%86%E7%89%87thunks/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;react-router详细讲解
    &lt;ul&gt;
      &lt;li&gt;https://react-guide.github.io/react-router-cn/docs/Introduction.html&lt;/li&gt;
      &lt;li&gt;原理: http://zhenhua-lee.github.io/react/history.html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;promisefetch引入&quot;&gt;promise、fetch引入&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;promise:  可用于:异步调用比如 ajax多层嵌套的处理方式:  promise then 、async await(基于promise实现)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;var promise = new Promise(function(resolve, reject) {
  if (/* 异步操作成功 */){
    resolve(value);
  } else {
    reject(error);
  }
});

then: 链式操作 \ catch异常处理
 - then添加resolve, reject两个函数传入到new Promise(function(resolve, reject))
 - then中包含return, 会继续执行下一个then, 不会退出整个promise
promise.then(function(value) {
   // success
}, function(value) {
  // failure
}).catch(function(error) {
  // error deal
});
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;fetch: 封装了ajax、Promise实现, fetch函数内部操作promise对象. 
       比如respons.json(), 但fetch外部方法handle等返回promise对象,需要嵌套promise)
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fetch('url')  
  .then(function(response) {
     if(response.status === 200){ // 先判断response status
       return response.json(); //response.json()是promise对象
     }  
  })  
 .then(function(data) {  
     return Promise.resolve(data); 
 })  
.catch(function(error) {  
    log('Request failed', error)  
});
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;fetch组合promise
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; return new Promise((resolve, reject) =&amp;gt; { //否则需要resolve, reject地方都需要return Promise.resolve()  
   fetch(url, {
       credentials: 'include',
       method: 'GET',
       headers: {
           'Accept': 'application/json',
           'Content-Type': 'application/json',
           &quot;X-Requested-With&quot;: &quot;XMLHttpRequest&quot;,
           &quot;x-source&quot;: &quot;web&quot;
       },
       body: opts
   })
   .then(response =&amp;gt; {
      if (checkStatus(response)) {
         return response.json();
      }
    })
    .then(data =&amp;gt; {
       if (checkCode(data)) {
          resolve(data);
       } else {
          reject();
       }
    }).catch(error =&amp;gt; {
          handleError(reject, error)
    })
  })
}
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;promise详细讲解
    &lt;ul&gt;
      &lt;li&gt;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&lt;/li&gt;
      &lt;li&gt;https://developers.google.com/web/fundamentals/getting-started/primers/promises?hl=zh-cn&lt;/li&gt;
      &lt;li&gt;https://wohugb.gitbooks.io/ecmascript-6/content/docs/promise.html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;fetch详细讲解
    &lt;ul&gt;
      &lt;li&gt;https://developers.google.com/web/updates/2015/03/introduction-to-fetch&lt;/li&gt;
      &lt;li&gt;fetch http参数设置: https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;## webpack&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;编译ts、tsx–&amp;gt;读取tsconfig.js
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;test:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/\.tsx?$/,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;use:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'ts-loader'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;//ts&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;  &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;早于&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;js&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;loader&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;编译js、jsx
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;w&quot;&gt;    &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;test:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/\.jsx?$/,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;exclude:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/node_modules/,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;use:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;'babel-loader'&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;编译scss、css
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;test:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;/.css$/,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;use:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ExtractTextPlugin.extract({&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;---&amp;gt;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ExtractTextPlugin处理css分片&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;fallback:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&quot;style-loader&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
      &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;use&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;css-loader!sass-loader&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
   &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;plugins引入:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;err&quot;&gt;ExtractTextPlugin('&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;chunkhash:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;.css')&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;分离css、js bundle
    &lt;ul&gt;
      &lt;li&gt;webpack css: ExtractTextWebpackPlugin&lt;/li&gt;
      &lt;li&gt;webpack js: CommonsChunkPlugin
        &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;entry: {
  vendor: ['react', 'react-redux', 'redux-thunk', 'react-router']
}
plugins定义:  new webpack.optimize.CommonsChunkPlugin({
  name: ['vendor']
})
&lt;/code&gt;&lt;/pre&gt;
        &lt;/div&gt;
      &lt;/li&gt;
      &lt;li&gt;代码动态分离：require.ensure()&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;压缩 js、css
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; new webpack.optimize.UglifyJsPlugin({
   compress: {
     warnings: false
   }
 }),
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;md5 js、css
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; filename: '[name]-[hash].min.js', --&amp;gt;entry中定义hash
 chunkFilename: '[name].[chunkhash:8].js', --&amp;gt;分片文件hash
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;html template 动态生成
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  index初始模板: &amp;lt;%= htmlWebpackPlugin.options.title %&amp;gt;
  plugins:定义
   new HtmlWebpackPlugin({
     filename: 'index.html',
     template: path.join(__dirname, 'index.html'),
     chunks: ['vendor', 'index'],
     inject: 'body',
     title: '基础搭建',
     jsPath: staticPath,
     isColumbus: isColumbus,
     locale: isColumbus ? 'en_US' : 'zh_CN',
  }),
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;环境变量featureFlag定义、替换–&amp;gt;代码中引用process.env. NODE_ENV替换isProduction
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; new webpack.DefinePlugin({
   'process.env': {
      'NODE_ENV': isProduction
   }
 }),
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;支持开发、测试、发布打包区分
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;package.json添加
   &quot;compile&quot;: &quot;rm -rf ./dist ./web-user.tar.gz &amp;amp;&amp;amp; webpack --config webpack.config.js &amp;amp;&amp;amp; tar -zcvf web-user.tar.gz ./dist &quot;,
   &quot;build&quot;: &quot;cross-env NODE_ENV=production npm run compile&quot;,
   &quot;build-columbus&quot;: &quot;cross-env NODE_ENV=production COLUMBUS=true npm run compile&quot;
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;支持开发、测试、发布 静态资源前缀路径配置
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; const staticPath = process.env.DEV_TEST === 'true' ? 's1.test.*' : 's1.*.*';
 new HtmlWebpackPlugin({
    staticPath: 'index.html'
 })
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;支持源码打包, chrome源码调试
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; devtool: 'source-map',
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;支持静态资源打包copy
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; new CopyPlugin([
   {
     from: vendorsPath,
     to: './vendors/',
     force: false,
   }
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;支持变更热编译,浏览器自动刷新
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;  //TODO(zhoulj)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;webpack详细讲解
    &lt;ul&gt;
      &lt;li&gt;https://doc.webpack-china.org&lt;/li&gt;
      &lt;li&gt;https://fakefish.github.io/react-webpack-cookbook/index.html&lt;/li&gt;
      &lt;li&gt;https://mrshi.gitbooks.io/survivejs_webpack_chinese/chapter3-3.html&lt;/li&gt;
      &lt;li&gt;打包原理: https://cnodejs.org/topic/5867bb575eac96bb04d3e301&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;国际化实现&quot;&gt;国际化实现&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;```
 //TODO(zhoulj)
```
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;mock-server模拟&quot;&gt;mock server模拟&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;fetch-mock研究:
    &lt;ul&gt;
      &lt;li&gt;http://www.wheresrhys.co.uk/fetch-mock/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;express-mock研究:
    &lt;ul&gt;
      &lt;li&gt;原理: 1)web-dev-server开一个端口为port1: mock server   2)express 开一个端口为port2: proxy server  3)express路由匹配方式，返回假数据&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;支持本地访问， ip可访问
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; //TODO(zhoulj)
&lt;/code&gt;&lt;/pre&gt;
    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;fetch-mock vs express-mock:
    &lt;ul&gt;
      &lt;li&gt;fetch-mock没有真正发送http请求,所有本地mock可以模拟各种 http status&lt;/li&gt;
      &lt;li&gt;fetch-mock data支持热编译&lt;/li&gt;
      &lt;li&gt;express-mock支持本地跨域请求远程服务器, 并且可以真实登录数据&lt;/li&gt;
      &lt;li&gt;express-mock支持部分接口mock,部分接口走远程&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;express详细讲解
    &lt;ul&gt;
      &lt;li&gt;http://www.expressjs.com.cn/guide/routing.html&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">项目结构规划 docs # 项目文档 tests # 其他测试文件 mock # mock server/data node_modules src # 项目源码 |-- module # 项目模块(只有一个模块,这层目录可以省略) | |-- components # 组件组件 | | |-- *.tsx | |-- actions # 项目action | | |-- actionType.ts | | |-- action.ts | |-- reducers # 项目reducer | | |-- index.ts | |-- containers # 项目view  | | |-- *.tsx | |-- service # 项目service | | |-- *.ts | |-- css # 项目css | | |-- *.scss | | |-- index.ts | |-- locale # 国际化文件 | |-- route.ts # 模块入口路由定义(按需加载) | |-- index.tsx # 模块入口引入文件 | |-- routes.ts # 模块入口子路由定义 |-- public # 项目静态资源公共目录 | |-- css # 公共CSS目录 | | |-- common.scss | |-- img # 公共图片目录 | | |-- xx.png |-- util # 公共util目录 | |-- *.ts index.html # 访问的入口 entry.tsx # js入口文件 |-- App.tsx # 初始化redux store\国际化 webpack.config.js # 公共配置 webpack.dev.js # 开发配置 webpack.release.js # 发布配置 tsconfig.js # ts配置文件 package.json READNE.md https://segmentfault.com/a/1190000005969488#articleHeader15</summary></entry></feed>