<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <description></description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 25 Jul 2017 23:00:14 +0800</pubDate>
    <lastBuildDate>Tue, 25 Jul 2017 23:00:14 +0800</lastBuildDate>
    <generator>Jekyll v3.5.1</generator>
    
      <item>
        <title>react</title>
        <description>&lt;h2 id=&quot;what-is-react&quot;&gt;what is react&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;构建用户界面的javascript库(非框架), 轻量级&lt;/li&gt;
  &lt;li&gt;构建UI, mvc中v&lt;/li&gt;
  &lt;li&gt;虚拟dom, 提升页面渲染速度, 变化部分局部更新&lt;/li&gt;
  &lt;li&gt;jsx模板语言, 具有javascript全部功能, 是js扩展(非引入新概念指令、控制器)&lt;/li&gt;
  &lt;li&gt;组件化, 增强代码复用、组件独立测试&lt;/li&gt;
  &lt;li&gt;单向数据流, 比数据绑定更简单(非双向绑定:数据来源混乱)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;相关:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;http://www.runoob.com/react/react-tutorial.html&lt;/li&gt;
  &lt;li&gt;https://facebook.github.io/react/docs/installation.html&lt;/li&gt;
  &lt;li&gt;http://www.ruanyifeng.com/blog/2015/03/react.html&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reactdomrender&quot;&gt;ReactDOM.render()&lt;/h2&gt;
&lt;p&gt;模板转化html语言, 插入指定的dom&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;ReactDOM.render(
    &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;,
    document.getElementById('example')
);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;react-jsx&quot;&gt;React JSX&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Babel编译jsx-&amp;gt;React.createElement(),不使用jsx也可以全通过js React,但是代码不简洁, 意思上是等价&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;react元素创建,两种方式等价--&amp;gt;元素区别组件
const getHelloWord = &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;

const element = React.createElement(
  'h1',
  'Hello, world!'
);
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;遇到 HTML 标签（以 &amp;lt; 开头），就用 HTML 规则解析；遇到代码块（以 { 开头），就用 JavaScript 规则解析&lt;/li&gt;
  &lt;li&gt;渲染之前,转义jsx值, 避免xss攻击&lt;/li&gt;
  &lt;li&gt;javaScript表达式: jsx中使用js表达式, 包裹{}
    &lt;pre&gt;&lt;code&gt;function formatName(user) {
return user.firstName + ' ' + user.lastName;
}
function getGreeting(user) {
return &amp;lt;h1&amp;gt;Hello, {formatName(user)}&amp;lt;/h1&amp;gt;;--&amp;gt;{}
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;jsx[用html元素]行内不能使用if、if else 语句
    &lt;pre&gt;&lt;code&gt; if: &amp;amp;代替
 const getGreeting(isOpen) = &amp;lt;div&amp;gt;{isOpen &amp;amp;&amp;amp; true}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
    &lt;pre&gt;&lt;code&gt; if else:--&amp;gt;三元运算代替
 const getGreeting(isOpen) = &amp;lt;div&amp;gt;{isOpen ? true : false}&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;内联样式
    &lt;pre&gt;&lt;code&gt;const myStyle = {
  fontSize: 100,---&amp;gt;元素数字后自动添加px, 驼峰转化
  color: '#FF0000'
};
const getGreeting() { return &amp;lt;div style={myStyle}&amp;gt;&amp;lt;/div&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
  &lt;li&gt;数组元素-&amp;gt;数组所有成员添加模板中
    &lt;pre&gt;&lt;code&gt;const arr = [&amp;lt;h1&amp;gt;arr1&amp;lt;/h1&amp;gt;, &amp;lt;h2&amp;gt;arr2&amp;lt;/h2&amp;gt;]
const getGreeting() { return &amp;lt;div&amp;gt;{arr}&amp;lt;/div&amp;gt;}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;react-组件&quot;&gt;React 组件&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;react元素 vs 组件命名:
    &lt;ul&gt;
      &lt;li&gt;元素以小写字母开头, 组件以大写字母开头&lt;/li&gt;
      &lt;li&gt;元素引用直接 元素名(所以无法传递props), 组件&amp;lt;element props&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;元素创建的3中方式
    &lt;ul&gt;
      &lt;li&gt;函数方式&lt;/li&gt;
      &lt;li&gt;es6 class&lt;/li&gt;
      &lt;li&gt;React.createClass
        &lt;pre&gt;&lt;code&gt;function HelloWord(props) {--&amp;gt;props传递
  &amp;lt;div&amp;gt;{props.name}&amp;lt;/div&amp;gt;
}
&lt;/code&gt;&lt;/pre&gt;
        &lt;pre&gt;&lt;code&gt;class HelloWolrd extends React.Component {
  render(){
      return &amp;lt;div&amp;gt;{this.props.name}&amp;lt;/div&amp;gt;
  }
}
&lt;/code&gt;&lt;/pre&gt;
        &lt;pre&gt;&lt;code&gt;var HelloWolrd = React.createClass({
render: function() {
return &amp;lt;h1&amp;gt;Hello {this.props.name}&amp;lt;/h1&amp;gt;;
}
});
&lt;/code&gt;&lt;/pre&gt;
        &lt;p&gt;调用:
```&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
    &lt;HelloWolrd name=&quot;test&quot; /&gt;

    &lt;p&gt;```&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;react-props&quot;&gt;React props&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;this.props.children: 表示组件的所有子节点
    &lt;ul&gt;
      &lt;li&gt;没有子节点undefined&lt;/li&gt;
      &lt;li&gt;有一个子节点，数据类型是 object&lt;/li&gt;
      &lt;li&gt;有多个子节点，数据类型就是 array&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;React.Children.map(this.props.children, function (child) {
   return &amp;lt;li&amp;gt;{child}&amp;lt;/li&amp;gt;;--&amp;gt;React.Children获取所有子节点, React.Children.map遍历子节点
})
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;react-state&quot;&gt;React state&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;就是将组件看成是一个状态机，一开始有一个初始状态，然后用户互动，导致状态变化，从而触发重新渲染 UI&lt;/li&gt;
  &lt;li&gt;state vs props
    &lt;ul&gt;
      &lt;li&gt;props不再改变的特性，而this.state 是会随着用户互动而产生变化的特性&lt;/li&gt;
      &lt;li&gt;props父组件传递, state组件内部状态&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;this.state属性读取, this.setState({})变更state
    &lt;pre&gt;&lt;code&gt;handleClick() {
    this.setState({'isOpen': !this.state.isOpen})
}
class Hello extends react.Component{
    render(){
        const isOpen = this.state.isOpen;
        return &amp;lt;a onClick=this.handleClick()&amp;gt;{isOpen ? true: false}&amp;lt;/&amp;gt;
    }
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;列表遍历和列表key类似js-map&quot;&gt;列表遍历、和列表key(类似js map)&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;List元素:
 const listItems = numbers.map((number, index) =&amp;gt;
    &amp;lt;li&amp;gt;{number}&amp;lt;/li&amp;gt;
 );
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;List组件:html标签外
function NumberList(props) {
  const numbers = props.numbers;
  const listItems = numbers.map((number, index) =&amp;gt;
    &amp;lt;li key={唯一的标记, 非遍历中的index索引}&amp;gt;{number}&amp;lt;/li&amp;gt;
  );
  return (
    &amp;lt;ul&amp;gt;{listItems}&amp;lt;/ul&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;List组件:html内标签外, {}包裹, 两种方式等价
function NumberList(props) {
  const numbers = props.numbers;
  return (
     &amp;lt;ul&amp;gt;
       {numbers.map((number) =&amp;gt;
          &amp;lt;li&amp;gt;{number}&amp;lt;/li&amp;gt;
        )}
     &amp;lt;/ul&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
  &lt;li&gt;遍历添加key: 唯一标记这条记录,虚拟dom比较索引,加载查找速度
    &lt;ul&gt;
      &lt;li&gt;不要使用map-&amp;gt;index作为key&lt;/li&gt;
      &lt;li&gt;不用组件中, 定义相关的key, 无影响&lt;/li&gt;
      &lt;li&gt;NumberList-&amp;gt;ListItem-&amp;gt;li多层组件, key添加到ListItem非遍历li上&lt;/li&gt;
      &lt;li&gt;key不存在props传递中, 如果需要传递唯一标识,可以id替换&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;forms&quot;&gt;Forms&lt;/h2&gt;
&lt;p&gt;react form elements例如&lt;input /&gt;、&lt;textarea&gt;、&lt;select&gt;跟html中区别&lt;/select&gt;&lt;/textarea&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;html: 用户输入界面, 界面值变更。&lt;/li&gt;
  &lt;li&gt;react: 需要onChange事件的回调函数,通过 event.target.value 读取用户输入的值,设置setState() 界面值变更
    &lt;pre&gt;&lt;code&gt; handleChange: function(event) {
  this.setState({value: event.target.value});
 },
render: function () {
  var value = this.state.value;
  return (
    &amp;lt;div&amp;gt;
      &amp;lt;input type=&quot;text&quot; value={value} onChange={this.handleChange} /&amp;gt;
      &amp;lt;p&amp;gt;{value}&amp;lt;/p&amp;gt;
    &amp;lt;/div&amp;gt;
  );
}
&lt;/code&gt;&lt;/pre&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;组件组合和继承&quot;&gt;组件组合和继承&lt;/h2&gt;
&lt;p&gt;建议组合增强复用性, 非继承&lt;/p&gt;
&lt;h4 id=&quot;继承三种方式&quot;&gt;继承三种方式&lt;/h4&gt;
&lt;ul&gt;
  &lt;li&gt;对子节点类型不明确–&amp;gt;只有一个子组件props.children
```
function FancyBorder(props) {
return (
    &lt;div&gt;
    {props.children}
  &lt;/div&gt;
    &lt;p&gt;);
}
调用:&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;FancyBorder&gt;
  &lt;div&gt;&lt;/div&gt;---&amp;gt;这个位置除了普通元素, 也可以是组件
&lt;FancyBorder&gt;  
```
- 多个子组件类型不明确--&amp;gt;两个props
```
function FancyBorder(props) {
  return (
    &lt;div&gt;
      {props.left}
    &lt;/div&gt;
    &lt;div&gt;
      {props.right}
    &lt;/div&gt;
  );
}
调用:
&lt;FancyBorder&gt;
  left={&lt;a /&gt;}
  right={&lt;b /&gt;}---&amp;gt;这个位置除了普通元素, 也可以是组件
&lt;FancyBorder&gt; 
```
- A组件是B组件一个特例
```
function Dialog(props) {
  return (
    &lt;FancyBorder&gt;
      &lt;h1&gt;
        {props.title}
      &lt;/h1&gt;
      &lt;p&gt;
        {props.message}
      &lt;/p&gt;
    &lt;/FancyBorder&gt;
  );
}

function WelcomeDialog() {
  return (
    &lt;Dialog title=&quot;Welcome&quot; message=&quot;test&quot; /&gt;
  );
}
```
&lt;/FancyBorder&gt;&lt;/FancyBorder&gt;&lt;/FancyBorder&gt;&lt;/FancyBorder&gt;
</description>
        <pubDate>Sun, 23 Jul 2017 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2017/07/23/react/</link>
        <guid isPermaLink="true">http://localhost:4000/2017/07/23/react/</guid>
        
        <category>fe</category>
        
        
        <category>react</category>
        
      </item>
    
  </channel>
</rss>
